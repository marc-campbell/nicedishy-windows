// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: spacex/api/device/wifi_config.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SpaceX.API.Device {

  /// <summary>Holder for reflection information generated from spacex/api/device/wifi_config.proto</summary>
  public static partial class WifiConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for spacex/api/device/wifi_config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WifiConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiNzcGFjZXgvYXBpL2RldmljZS93aWZpX2NvbmZpZy5wcm90bxIRU3BhY2VY",
            "LkFQSS5EZXZpY2UaH3NwYWNleC9hcGkvZGV2aWNlL2NvbW1hbmQucHJvdG8i",
            "/hMKCldpZmlDb25maWcSIQoMbmV0d29ya19uYW1lGAEgASgJUgtuZXR3b3Jr",
            "TmFtZRItChJhcHBseV9uZXR3b3JrX25hbWUY6QcgASgIUhBhcHBseU5ldHdv",
            "cmtOYW1lEikKEG5ldHdvcmtfcGFzc3dvcmQYAiABKAlSD25ldHdvcmtQYXNz",
            "d29yZBI1ChZhcHBseV9uZXR3b3JrX3Bhc3N3b3JkGOoHIAEoCFIUYXBwbHlO",
            "ZXR3b3JrUGFzc3dvcmQSIQoMY291bnRyeV9jb2RlGAMgASgJUgtjb3VudHJ5",
            "Q29kZRIZCghsYW5faXB2NBgFIAEoCVIHbGFuSXB2NBIvChRsYW5faXB2NF9z",
            "dWJuZXRfbWFzaxgGIAEoCVIRbGFuSXB2NFN1Ym5ldE1hc2sSJQoOc2V0dXBf",
            "Y29tcGxldGUYByABKAhSDXNldHVwQ29tcGxldGUSMQoUYXBwbHlfc2V0dXBf",
            "Y29tcGxldGUY8gcgASgIUhJhcHBseVNldHVwQ29tcGxldGUSNAoUZmFjdG9y",
            "eV9yZXNldF90aWNrZXIYCCABKA1CAhgBUhJmYWN0b3J5UmVzZXRUaWNrZXIS",
            "GAoHdmVyc2lvbhgJIAEoDVIHdmVyc2lvbhJLCg13aWZpX3NlY3VyaXR5GAog",
            "ASgOMiYuU3BhY2VYLkFQSS5EZXZpY2UuV2lmaUNvbmZpZy5TZWN1cml0eVIM",
            "d2lmaVNlY3VyaXR5Ei8KE2FwcGx5X3dpZmlfc2VjdXJpdHkY7AcgASgIUhFh",
            "cHBseVdpZmlTZWN1cml0eRIqChFuZXR3b3JrX25hbWVfNWdoehgLIAEoCVIP",
            "bmV0d29ya05hbWU1Z2h6EjYKF2FwcGx5X25ldHdvcmtfbmFtZV81Z2h6GO0H",
            "IAEoCFIUYXBwbHlOZXR3b3JrTmFtZTVnaHoSFwoHbWFjX3dhbhgMIAEoCVIG",
            "bWFjV2FuEiMKDWFwcGx5X21hY193YW4Y7gcgASgIUgthcHBseU1hY1dhbhIX",
            "CgdtYWNfbGFuGA0gASgJUgZtYWNMYW4SIwoNYXBwbHlfbWFjX2xhbhjvByAB",
            "KAhSC2FwcGx5TWFjTGFuEiAKDG1hY19sYW5fMmdoehgOIAEoCVIKbWFjTGFu",
            "MmdoehIsChJhcHBseV9tYWNfbGFuXzJnaHoY8AcgASgIUg9hcHBseU1hY0xh",
            "bjJnaHoSIAoMbWFjX2xhbl81Z2h6GA8gASgJUgptYWNMYW41Z2h6EiwKEmFw",
            "cGx5X21hY19sYW5fNWdoehjxByABKAhSD2FwcGx5TWFjTGFuNWdoehIbCglk",
            "ZXZpY2VfaWQYECABKAlSCGRldmljZUlkEiEKDGRpc2FibGVfMmdoehgRIAEo",
            "CFILZGlzYWJsZTJnaHoSLQoSYXBwbHlfZGlzYWJsZV8yZ2h6GPMHIAEoCFIQ",
            "YXBwbHlEaXNhYmxlMmdoehIhCgxkaXNhYmxlXzVnaHoYEiABKAhSC2Rpc2Fi",
            "bGU1Z2h6Ei0KEmFwcGx5X2Rpc2FibGVfNWdoehj0ByABKAhSEGFwcGx5RGlz",
            "YWJsZTVnaHoSJQoOZGlzYWJsZV9oaWRkZW4YHSABKAhSDWRpc2FibGVIaWRk",
            "ZW4SMQoUYXBwbHlfZGlzYWJsZV9oaWRkZW4Y9wcgASgIUhJhcHBseURpc2Fi",
            "bGVIaWRkZW4SIQoMY2hhbm5lbF8yZ2h6GBMgASgNUgtjaGFubmVsMmdoehIt",
            "ChJhcHBseV9jaGFubmVsXzJnaHoY9QcgASgIUhBhcHBseUNoYW5uZWwyZ2h6",
            "EiEKDGNoYW5uZWxfNWdoehgUIAEoDVILY2hhbm5lbDVnaHoSLQoSYXBwbHlf",
            "Y2hhbm5lbF81Z2h6GPYHIAEoCFIQYXBwbHlDaGFubmVsNWdoehJLCgptZXNo",
            "X2F1dGhzGBUgAygLMiwuU3BhY2VYLkFQSS5EZXZpY2UuV2lmaUNvbmZpZy5N",
            "ZXNoQXV0aHNFbnRyeVIJbWVzaEF1dGhzEikKEGFwcGx5X21lc2hfYXV0aHMY",
            "/QcgASgIUg5hcHBseU1lc2hBdXRocxIpCg5tZXNoX3Vwc3RyZWFtcxgZIAMo",
            "CUICGAFSDW1lc2hVcHN0cmVhbXMSNQoUYXBwbHlfbWVzaF91cHN0cmVhbXMY",
            "mwggASgIQgIYAVISYXBwbHlNZXNoVXBzdHJlYW1zEicKDXRydXN0ZWRfcGVl",
            "cnMYGyADKAlCAhgBUgx0cnVzdGVkUGVlcnMSMwoTYXBwbHlfdHJ1c3RlZF9w",
            "ZWVycxicCCABKAhCAhgBUhFhcHBseVRydXN0ZWRQZWVycxItChBkaXN0cnVz",
            "dGVkX3BlZXJzGBwgAygJQgIYAVIPZGlzdHJ1c3RlZFBlZXJzEjkKFmFwcGx5",
            "X2Rpc3RydXN0ZWRfcGVlcnMYnQggASgIQgIYAVIUYXBwbHlEaXN0cnVzdGVk",
            "UGVlcnMSPwoMZHluYW1pY19rZXlzGBYgAygLMhwuU3BhY2VYLkFQSS5EZXZp",
            "Y2UuUHVibGljS2V5UgtkeW5hbWljS2V5cxIfCgtpc19yZXBlYXRlchgXIAEo",
            "CFIKaXNSZXBlYXRlchIrChFhcHBseV9pc19yZXBlYXRlchiHCCABKAhSD2Fw",
            "cGx5SXNSZXBlYXRlchI2ChdleHBlcmltZW50c19lbmFibGVfbWVzaBgYIAEo",
            "CFIVZXhwZXJpbWVudHNFbmFibGVNZXNoEkIKHWFwcGx5X2V4cGVyaW1lbnRz",
            "X2VuYWJsZV9tZXNoGJEIIAEoCFIaYXBwbHlFeHBlcmltZW50c0VuYWJsZU1l",
            "c2gSHQoKYm9vdF9jb3VudBgaIAEoBVIJYm9vdENvdW50EiIKDGh0X2JhbmR3",
            "aWR0aBjRDyABKAlSC2h0QmFuZHdpZHRoEiQKDXZodF9iYW5kd2lkdGgY0g8g",
            "ASgJUgx2aHRCYW5kd2lkdGgSLQoSd2lyZWxlc3NfbW9kZV8yZ2h6GNMPIAEo",
            "CVIQd2lyZWxlc3NNb2RlMmdoehItChJ3aXJlbGVzc19tb2RlXzVnaHoY1A8g",
            "ASgJUhB3aXJlbGVzc01vZGU1Z2h6EiAKC25hbWVzZXJ2ZXJzGB4gAygJUgtu",
            "YW1lc2VydmVycxIsChFhcHBseV9uYW1lc2VydmVycxieCCABKAhSEGFwcGx5",
            "TmFtZXNlcnZlcnMaWQoOTWVzaEF1dGhzRW50cnkSEAoDa2V5GAEgASgJUgNr",
            "ZXkSMQoFdmFsdWUYAiABKA4yGy5TcGFjZVguQVBJLkRldmljZS5NZXNoQXV0",
            "aFIFdmFsdWU6AjgBIjkKCFNlY3VyaXR5EgsKB1VOS05PV04QABIICgRXUEEy",
            "EAESCAoEV1BBMxACEgwKCFdQQTJXUEEzEANKBAgEEAVKBgjrBxDsBypkCghN",
            "ZXNoQXV0aBIVChFNRVNIX0FVVEhfVU5LTk9XThAAEhEKDU1FU0hfQVVUSF9O",
            "RVcQARIVChFNRVNIX0FVVEhfVFJVU1RFRBACEhcKE01FU0hfQVVUSF9VTlRS",
            "VVNURUQQA0IXWhVzcGFjZXguY29tL2FwaS9kZXZpY2ViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SpaceX.API.Device.CommandReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SpaceX.API.Device.MeshAuth), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SpaceX.API.Device.WifiConfig), global::SpaceX.API.Device.WifiConfig.Parser, new[]{ "NetworkName", "ApplyNetworkName", "NetworkPassword", "ApplyNetworkPassword", "CountryCode", "LanIpv4", "LanIpv4SubnetMask", "SetupComplete", "ApplySetupComplete", "FactoryResetTicker", "Version", "WifiSecurity", "ApplyWifiSecurity", "NetworkName5Ghz", "ApplyNetworkName5Ghz", "MacWan", "ApplyMacWan", "MacLan", "ApplyMacLan", "MacLan2Ghz", "ApplyMacLan2Ghz", "MacLan5Ghz", "ApplyMacLan5Ghz", "DeviceId", "Disable2Ghz", "ApplyDisable2Ghz", "Disable5Ghz", "ApplyDisable5Ghz", "DisableHidden", "ApplyDisableHidden", "Channel2Ghz", "ApplyChannel2Ghz", "Channel5Ghz", "ApplyChannel5Ghz", "MeshAuths", "ApplyMeshAuths", "MeshUpstreams", "ApplyMeshUpstreams", "TrustedPeers", "ApplyTrustedPeers", "DistrustedPeers", "ApplyDistrustedPeers", "DynamicKeys", "IsRepeater", "ApplyIsRepeater", "ExperimentsEnableMesh", "ApplyExperimentsEnableMesh", "BootCount", "HtBandwidth", "VhtBandwidth", "WirelessMode2Ghz", "WirelessMode5Ghz", "Nameservers", "ApplyNameservers" }, null, new[]{ typeof(global::SpaceX.API.Device.WifiConfig.Types.Security) }, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Enums
  public enum MeshAuth {
    [pbr::OriginalName("MESH_AUTH_UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("MESH_AUTH_NEW")] New = 1,
    [pbr::OriginalName("MESH_AUTH_TRUSTED")] Trusted = 2,
    [pbr::OriginalName("MESH_AUTH_UNTRUSTED")] Untrusted = 3,
  }

  #endregion

  #region Messages
  public sealed partial class WifiConfig : pb::IMessage<WifiConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WifiConfig> _parser = new pb::MessageParser<WifiConfig>(() => new WifiConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<WifiConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SpaceX.API.Device.WifiConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WifiConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WifiConfig(WifiConfig other) : this() {
      networkName_ = other.networkName_;
      applyNetworkName_ = other.applyNetworkName_;
      networkPassword_ = other.networkPassword_;
      applyNetworkPassword_ = other.applyNetworkPassword_;
      countryCode_ = other.countryCode_;
      lanIpv4_ = other.lanIpv4_;
      lanIpv4SubnetMask_ = other.lanIpv4SubnetMask_;
      setupComplete_ = other.setupComplete_;
      applySetupComplete_ = other.applySetupComplete_;
      factoryResetTicker_ = other.factoryResetTicker_;
      version_ = other.version_;
      wifiSecurity_ = other.wifiSecurity_;
      applyWifiSecurity_ = other.applyWifiSecurity_;
      networkName5Ghz_ = other.networkName5Ghz_;
      applyNetworkName5Ghz_ = other.applyNetworkName5Ghz_;
      macWan_ = other.macWan_;
      applyMacWan_ = other.applyMacWan_;
      macLan_ = other.macLan_;
      applyMacLan_ = other.applyMacLan_;
      macLan2Ghz_ = other.macLan2Ghz_;
      applyMacLan2Ghz_ = other.applyMacLan2Ghz_;
      macLan5Ghz_ = other.macLan5Ghz_;
      applyMacLan5Ghz_ = other.applyMacLan5Ghz_;
      deviceId_ = other.deviceId_;
      disable2Ghz_ = other.disable2Ghz_;
      applyDisable2Ghz_ = other.applyDisable2Ghz_;
      disable5Ghz_ = other.disable5Ghz_;
      applyDisable5Ghz_ = other.applyDisable5Ghz_;
      disableHidden_ = other.disableHidden_;
      applyDisableHidden_ = other.applyDisableHidden_;
      channel2Ghz_ = other.channel2Ghz_;
      applyChannel2Ghz_ = other.applyChannel2Ghz_;
      channel5Ghz_ = other.channel5Ghz_;
      applyChannel5Ghz_ = other.applyChannel5Ghz_;
      meshAuths_ = other.meshAuths_.Clone();
      applyMeshAuths_ = other.applyMeshAuths_;
      meshUpstreams_ = other.meshUpstreams_.Clone();
      applyMeshUpstreams_ = other.applyMeshUpstreams_;
      trustedPeers_ = other.trustedPeers_.Clone();
      applyTrustedPeers_ = other.applyTrustedPeers_;
      distrustedPeers_ = other.distrustedPeers_.Clone();
      applyDistrustedPeers_ = other.applyDistrustedPeers_;
      dynamicKeys_ = other.dynamicKeys_.Clone();
      isRepeater_ = other.isRepeater_;
      applyIsRepeater_ = other.applyIsRepeater_;
      experimentsEnableMesh_ = other.experimentsEnableMesh_;
      applyExperimentsEnableMesh_ = other.applyExperimentsEnableMesh_;
      bootCount_ = other.bootCount_;
      htBandwidth_ = other.htBandwidth_;
      vhtBandwidth_ = other.vhtBandwidth_;
      wirelessMode2Ghz_ = other.wirelessMode2Ghz_;
      wirelessMode5Ghz_ = other.wirelessMode5Ghz_;
      nameservers_ = other.nameservers_.Clone();
      applyNameservers_ = other.applyNameservers_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WifiConfig Clone() {
      return new WifiConfig(this);
    }

    /// <summary>Field number for the "network_name" field.</summary>
    public const int NetworkNameFieldNumber = 1;
    private string networkName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string NetworkName {
      get { return networkName_; }
      set {
        networkName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "apply_network_name" field.</summary>
    public const int ApplyNetworkNameFieldNumber = 1001;
    private bool applyNetworkName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ApplyNetworkName {
      get { return applyNetworkName_; }
      set {
        applyNetworkName_ = value;
      }
    }

    /// <summary>Field number for the "network_password" field.</summary>
    public const int NetworkPasswordFieldNumber = 2;
    private string networkPassword_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string NetworkPassword {
      get { return networkPassword_; }
      set {
        networkPassword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "apply_network_password" field.</summary>
    public const int ApplyNetworkPasswordFieldNumber = 1002;
    private bool applyNetworkPassword_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ApplyNetworkPassword {
      get { return applyNetworkPassword_; }
      set {
        applyNetworkPassword_ = value;
      }
    }

    /// <summary>Field number for the "country_code" field.</summary>
    public const int CountryCodeFieldNumber = 3;
    private string countryCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryCode {
      get { return countryCode_; }
      set {
        countryCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lan_ipv4" field.</summary>
    public const int LanIpv4FieldNumber = 5;
    private string lanIpv4_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LanIpv4 {
      get { return lanIpv4_; }
      set {
        lanIpv4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lan_ipv4_subnet_mask" field.</summary>
    public const int LanIpv4SubnetMaskFieldNumber = 6;
    private string lanIpv4SubnetMask_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LanIpv4SubnetMask {
      get { return lanIpv4SubnetMask_; }
      set {
        lanIpv4SubnetMask_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "setup_complete" field.</summary>
    public const int SetupCompleteFieldNumber = 7;
    private bool setupComplete_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SetupComplete {
      get { return setupComplete_; }
      set {
        setupComplete_ = value;
      }
    }

    /// <summary>Field number for the "apply_setup_complete" field.</summary>
    public const int ApplySetupCompleteFieldNumber = 1010;
    private bool applySetupComplete_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ApplySetupComplete {
      get { return applySetupComplete_; }
      set {
        applySetupComplete_ = value;
      }
    }

    /// <summary>Field number for the "factory_reset_ticker" field.</summary>
    public const int FactoryResetTickerFieldNumber = 8;
    private uint factoryResetTicker_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint FactoryResetTicker {
      get { return factoryResetTicker_; }
      set {
        factoryResetTicker_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 9;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "wifi_security" field.</summary>
    public const int WifiSecurityFieldNumber = 10;
    private global::SpaceX.API.Device.WifiConfig.Types.Security wifiSecurity_ = global::SpaceX.API.Device.WifiConfig.Types.Security.Unknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::SpaceX.API.Device.WifiConfig.Types.Security WifiSecurity {
      get { return wifiSecurity_; }
      set {
        wifiSecurity_ = value;
      }
    }

    /// <summary>Field number for the "apply_wifi_security" field.</summary>
    public const int ApplyWifiSecurityFieldNumber = 1004;
    private bool applyWifiSecurity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ApplyWifiSecurity {
      get { return applyWifiSecurity_; }
      set {
        applyWifiSecurity_ = value;
      }
    }

    /// <summary>Field number for the "network_name_5ghz" field.</summary>
    public const int NetworkName5GhzFieldNumber = 11;
    private string networkName5Ghz_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string NetworkName5Ghz {
      get { return networkName5Ghz_; }
      set {
        networkName5Ghz_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "apply_network_name_5ghz" field.</summary>
    public const int ApplyNetworkName5GhzFieldNumber = 1005;
    private bool applyNetworkName5Ghz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ApplyNetworkName5Ghz {
      get { return applyNetworkName5Ghz_; }
      set {
        applyNetworkName5Ghz_ = value;
      }
    }

    /// <summary>Field number for the "mac_wan" field.</summary>
    public const int MacWanFieldNumber = 12;
    private string macWan_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MacWan {
      get { return macWan_; }
      set {
        macWan_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "apply_mac_wan" field.</summary>
    public const int ApplyMacWanFieldNumber = 1006;
    private bool applyMacWan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ApplyMacWan {
      get { return applyMacWan_; }
      set {
        applyMacWan_ = value;
      }
    }

    /// <summary>Field number for the "mac_lan" field.</summary>
    public const int MacLanFieldNumber = 13;
    private string macLan_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MacLan {
      get { return macLan_; }
      set {
        macLan_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "apply_mac_lan" field.</summary>
    public const int ApplyMacLanFieldNumber = 1007;
    private bool applyMacLan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ApplyMacLan {
      get { return applyMacLan_; }
      set {
        applyMacLan_ = value;
      }
    }

    /// <summary>Field number for the "mac_lan_2ghz" field.</summary>
    public const int MacLan2GhzFieldNumber = 14;
    private string macLan2Ghz_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MacLan2Ghz {
      get { return macLan2Ghz_; }
      set {
        macLan2Ghz_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "apply_mac_lan_2ghz" field.</summary>
    public const int ApplyMacLan2GhzFieldNumber = 1008;
    private bool applyMacLan2Ghz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ApplyMacLan2Ghz {
      get { return applyMacLan2Ghz_; }
      set {
        applyMacLan2Ghz_ = value;
      }
    }

    /// <summary>Field number for the "mac_lan_5ghz" field.</summary>
    public const int MacLan5GhzFieldNumber = 15;
    private string macLan5Ghz_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MacLan5Ghz {
      get { return macLan5Ghz_; }
      set {
        macLan5Ghz_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "apply_mac_lan_5ghz" field.</summary>
    public const int ApplyMacLan5GhzFieldNumber = 1009;
    private bool applyMacLan5Ghz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ApplyMacLan5Ghz {
      get { return applyMacLan5Ghz_; }
      set {
        applyMacLan5Ghz_ = value;
      }
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 16;
    private string deviceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "disable_2ghz" field.</summary>
    public const int Disable2GhzFieldNumber = 17;
    private bool disable2Ghz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Disable2Ghz {
      get { return disable2Ghz_; }
      set {
        disable2Ghz_ = value;
      }
    }

    /// <summary>Field number for the "apply_disable_2ghz" field.</summary>
    public const int ApplyDisable2GhzFieldNumber = 1011;
    private bool applyDisable2Ghz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ApplyDisable2Ghz {
      get { return applyDisable2Ghz_; }
      set {
        applyDisable2Ghz_ = value;
      }
    }

    /// <summary>Field number for the "disable_5ghz" field.</summary>
    public const int Disable5GhzFieldNumber = 18;
    private bool disable5Ghz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Disable5Ghz {
      get { return disable5Ghz_; }
      set {
        disable5Ghz_ = value;
      }
    }

    /// <summary>Field number for the "apply_disable_5ghz" field.</summary>
    public const int ApplyDisable5GhzFieldNumber = 1012;
    private bool applyDisable5Ghz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ApplyDisable5Ghz {
      get { return applyDisable5Ghz_; }
      set {
        applyDisable5Ghz_ = value;
      }
    }

    /// <summary>Field number for the "disable_hidden" field.</summary>
    public const int DisableHiddenFieldNumber = 29;
    private bool disableHidden_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DisableHidden {
      get { return disableHidden_; }
      set {
        disableHidden_ = value;
      }
    }

    /// <summary>Field number for the "apply_disable_hidden" field.</summary>
    public const int ApplyDisableHiddenFieldNumber = 1015;
    private bool applyDisableHidden_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ApplyDisableHidden {
      get { return applyDisableHidden_; }
      set {
        applyDisableHidden_ = value;
      }
    }

    /// <summary>Field number for the "channel_2ghz" field.</summary>
    public const int Channel2GhzFieldNumber = 19;
    private uint channel2Ghz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Channel2Ghz {
      get { return channel2Ghz_; }
      set {
        channel2Ghz_ = value;
      }
    }

    /// <summary>Field number for the "apply_channel_2ghz" field.</summary>
    public const int ApplyChannel2GhzFieldNumber = 1013;
    private bool applyChannel2Ghz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ApplyChannel2Ghz {
      get { return applyChannel2Ghz_; }
      set {
        applyChannel2Ghz_ = value;
      }
    }

    /// <summary>Field number for the "channel_5ghz" field.</summary>
    public const int Channel5GhzFieldNumber = 20;
    private uint channel5Ghz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Channel5Ghz {
      get { return channel5Ghz_; }
      set {
        channel5Ghz_ = value;
      }
    }

    /// <summary>Field number for the "apply_channel_5ghz" field.</summary>
    public const int ApplyChannel5GhzFieldNumber = 1014;
    private bool applyChannel5Ghz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ApplyChannel5Ghz {
      get { return applyChannel5Ghz_; }
      set {
        applyChannel5Ghz_ = value;
      }
    }

    /// <summary>Field number for the "mesh_auths" field.</summary>
    public const int MeshAuthsFieldNumber = 21;
    private static readonly pbc::MapField<string, global::SpaceX.API.Device.MeshAuth>.Codec _map_meshAuths_codec
        = new pbc::MapField<string, global::SpaceX.API.Device.MeshAuth>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForEnum(16, x => (int) x, x => (global::SpaceX.API.Device.MeshAuth) x, global::SpaceX.API.Device.MeshAuth.Unknown), 170);
    private readonly pbc::MapField<string, global::SpaceX.API.Device.MeshAuth> meshAuths_ = new pbc::MapField<string, global::SpaceX.API.Device.MeshAuth>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<string, global::SpaceX.API.Device.MeshAuth> MeshAuths {
      get { return meshAuths_; }
    }

    /// <summary>Field number for the "apply_mesh_auths" field.</summary>
    public const int ApplyMeshAuthsFieldNumber = 1021;
    private bool applyMeshAuths_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ApplyMeshAuths {
      get { return applyMeshAuths_; }
      set {
        applyMeshAuths_ = value;
      }
    }

    /// <summary>Field number for the "mesh_upstreams" field.</summary>
    public const int MeshUpstreamsFieldNumber = 25;
    private static readonly pb::FieldCodec<string> _repeated_meshUpstreams_codec
        = pb::FieldCodec.ForString(202);
    private readonly pbc::RepeatedField<string> meshUpstreams_ = new pbc::RepeatedField<string>();
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> MeshUpstreams {
      get { return meshUpstreams_; }
    }

    /// <summary>Field number for the "apply_mesh_upstreams" field.</summary>
    public const int ApplyMeshUpstreamsFieldNumber = 1051;
    private bool applyMeshUpstreams_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ApplyMeshUpstreams {
      get { return applyMeshUpstreams_; }
      set {
        applyMeshUpstreams_ = value;
      }
    }

    /// <summary>Field number for the "trusted_peers" field.</summary>
    public const int TrustedPeersFieldNumber = 27;
    private static readonly pb::FieldCodec<string> _repeated_trustedPeers_codec
        = pb::FieldCodec.ForString(218);
    private readonly pbc::RepeatedField<string> trustedPeers_ = new pbc::RepeatedField<string>();
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> TrustedPeers {
      get { return trustedPeers_; }
    }

    /// <summary>Field number for the "apply_trusted_peers" field.</summary>
    public const int ApplyTrustedPeersFieldNumber = 1052;
    private bool applyTrustedPeers_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ApplyTrustedPeers {
      get { return applyTrustedPeers_; }
      set {
        applyTrustedPeers_ = value;
      }
    }

    /// <summary>Field number for the "distrusted_peers" field.</summary>
    public const int DistrustedPeersFieldNumber = 28;
    private static readonly pb::FieldCodec<string> _repeated_distrustedPeers_codec
        = pb::FieldCodec.ForString(226);
    private readonly pbc::RepeatedField<string> distrustedPeers_ = new pbc::RepeatedField<string>();
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> DistrustedPeers {
      get { return distrustedPeers_; }
    }

    /// <summary>Field number for the "apply_distrusted_peers" field.</summary>
    public const int ApplyDistrustedPeersFieldNumber = 1053;
    private bool applyDistrustedPeers_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ApplyDistrustedPeers {
      get { return applyDistrustedPeers_; }
      set {
        applyDistrustedPeers_ = value;
      }
    }

    /// <summary>Field number for the "dynamic_keys" field.</summary>
    public const int DynamicKeysFieldNumber = 22;
    private static readonly pb::FieldCodec<global::SpaceX.API.Device.PublicKey> _repeated_dynamicKeys_codec
        = pb::FieldCodec.ForMessage(178, global::SpaceX.API.Device.PublicKey.Parser);
    private readonly pbc::RepeatedField<global::SpaceX.API.Device.PublicKey> dynamicKeys_ = new pbc::RepeatedField<global::SpaceX.API.Device.PublicKey>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::SpaceX.API.Device.PublicKey> DynamicKeys {
      get { return dynamicKeys_; }
    }

    /// <summary>Field number for the "is_repeater" field.</summary>
    public const int IsRepeaterFieldNumber = 23;
    private bool isRepeater_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsRepeater {
      get { return isRepeater_; }
      set {
        isRepeater_ = value;
      }
    }

    /// <summary>Field number for the "apply_is_repeater" field.</summary>
    public const int ApplyIsRepeaterFieldNumber = 1031;
    private bool applyIsRepeater_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ApplyIsRepeater {
      get { return applyIsRepeater_; }
      set {
        applyIsRepeater_ = value;
      }
    }

    /// <summary>Field number for the "experiments_enable_mesh" field.</summary>
    public const int ExperimentsEnableMeshFieldNumber = 24;
    private bool experimentsEnableMesh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ExperimentsEnableMesh {
      get { return experimentsEnableMesh_; }
      set {
        experimentsEnableMesh_ = value;
      }
    }

    /// <summary>Field number for the "apply_experiments_enable_mesh" field.</summary>
    public const int ApplyExperimentsEnableMeshFieldNumber = 1041;
    private bool applyExperimentsEnableMesh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ApplyExperimentsEnableMesh {
      get { return applyExperimentsEnableMesh_; }
      set {
        applyExperimentsEnableMesh_ = value;
      }
    }

    /// <summary>Field number for the "boot_count" field.</summary>
    public const int BootCountFieldNumber = 26;
    private int bootCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BootCount {
      get { return bootCount_; }
      set {
        bootCount_ = value;
      }
    }

    /// <summary>Field number for the "ht_bandwidth" field.</summary>
    public const int HtBandwidthFieldNumber = 2001;
    private string htBandwidth_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string HtBandwidth {
      get { return htBandwidth_; }
      set {
        htBandwidth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "vht_bandwidth" field.</summary>
    public const int VhtBandwidthFieldNumber = 2002;
    private string vhtBandwidth_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string VhtBandwidth {
      get { return vhtBandwidth_; }
      set {
        vhtBandwidth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "wireless_mode_2ghz" field.</summary>
    public const int WirelessMode2GhzFieldNumber = 2003;
    private string wirelessMode2Ghz_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string WirelessMode2Ghz {
      get { return wirelessMode2Ghz_; }
      set {
        wirelessMode2Ghz_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "wireless_mode_5ghz" field.</summary>
    public const int WirelessMode5GhzFieldNumber = 2004;
    private string wirelessMode5Ghz_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string WirelessMode5Ghz {
      get { return wirelessMode5Ghz_; }
      set {
        wirelessMode5Ghz_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nameservers" field.</summary>
    public const int NameserversFieldNumber = 30;
    private static readonly pb::FieldCodec<string> _repeated_nameservers_codec
        = pb::FieldCodec.ForString(242);
    private readonly pbc::RepeatedField<string> nameservers_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> Nameservers {
      get { return nameservers_; }
    }

    /// <summary>Field number for the "apply_nameservers" field.</summary>
    public const int ApplyNameserversFieldNumber = 1054;
    private bool applyNameservers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ApplyNameservers {
      get { return applyNameservers_; }
      set {
        applyNameservers_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as WifiConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(WifiConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NetworkName != other.NetworkName) return false;
      if (ApplyNetworkName != other.ApplyNetworkName) return false;
      if (NetworkPassword != other.NetworkPassword) return false;
      if (ApplyNetworkPassword != other.ApplyNetworkPassword) return false;
      if (CountryCode != other.CountryCode) return false;
      if (LanIpv4 != other.LanIpv4) return false;
      if (LanIpv4SubnetMask != other.LanIpv4SubnetMask) return false;
      if (SetupComplete != other.SetupComplete) return false;
      if (ApplySetupComplete != other.ApplySetupComplete) return false;
      if (FactoryResetTicker != other.FactoryResetTicker) return false;
      if (Version != other.Version) return false;
      if (WifiSecurity != other.WifiSecurity) return false;
      if (ApplyWifiSecurity != other.ApplyWifiSecurity) return false;
      if (NetworkName5Ghz != other.NetworkName5Ghz) return false;
      if (ApplyNetworkName5Ghz != other.ApplyNetworkName5Ghz) return false;
      if (MacWan != other.MacWan) return false;
      if (ApplyMacWan != other.ApplyMacWan) return false;
      if (MacLan != other.MacLan) return false;
      if (ApplyMacLan != other.ApplyMacLan) return false;
      if (MacLan2Ghz != other.MacLan2Ghz) return false;
      if (ApplyMacLan2Ghz != other.ApplyMacLan2Ghz) return false;
      if (MacLan5Ghz != other.MacLan5Ghz) return false;
      if (ApplyMacLan5Ghz != other.ApplyMacLan5Ghz) return false;
      if (DeviceId != other.DeviceId) return false;
      if (Disable2Ghz != other.Disable2Ghz) return false;
      if (ApplyDisable2Ghz != other.ApplyDisable2Ghz) return false;
      if (Disable5Ghz != other.Disable5Ghz) return false;
      if (ApplyDisable5Ghz != other.ApplyDisable5Ghz) return false;
      if (DisableHidden != other.DisableHidden) return false;
      if (ApplyDisableHidden != other.ApplyDisableHidden) return false;
      if (Channel2Ghz != other.Channel2Ghz) return false;
      if (ApplyChannel2Ghz != other.ApplyChannel2Ghz) return false;
      if (Channel5Ghz != other.Channel5Ghz) return false;
      if (ApplyChannel5Ghz != other.ApplyChannel5Ghz) return false;
      if (!MeshAuths.Equals(other.MeshAuths)) return false;
      if (ApplyMeshAuths != other.ApplyMeshAuths) return false;
      if(!meshUpstreams_.Equals(other.meshUpstreams_)) return false;
      if (ApplyMeshUpstreams != other.ApplyMeshUpstreams) return false;
      if(!trustedPeers_.Equals(other.trustedPeers_)) return false;
      if (ApplyTrustedPeers != other.ApplyTrustedPeers) return false;
      if(!distrustedPeers_.Equals(other.distrustedPeers_)) return false;
      if (ApplyDistrustedPeers != other.ApplyDistrustedPeers) return false;
      if(!dynamicKeys_.Equals(other.dynamicKeys_)) return false;
      if (IsRepeater != other.IsRepeater) return false;
      if (ApplyIsRepeater != other.ApplyIsRepeater) return false;
      if (ExperimentsEnableMesh != other.ExperimentsEnableMesh) return false;
      if (ApplyExperimentsEnableMesh != other.ApplyExperimentsEnableMesh) return false;
      if (BootCount != other.BootCount) return false;
      if (HtBandwidth != other.HtBandwidth) return false;
      if (VhtBandwidth != other.VhtBandwidth) return false;
      if (WirelessMode2Ghz != other.WirelessMode2Ghz) return false;
      if (WirelessMode5Ghz != other.WirelessMode5Ghz) return false;
      if(!nameservers_.Equals(other.nameservers_)) return false;
      if (ApplyNameservers != other.ApplyNameservers) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (NetworkName.Length != 0) hash ^= NetworkName.GetHashCode();
      if (ApplyNetworkName != false) hash ^= ApplyNetworkName.GetHashCode();
      if (NetworkPassword.Length != 0) hash ^= NetworkPassword.GetHashCode();
      if (ApplyNetworkPassword != false) hash ^= ApplyNetworkPassword.GetHashCode();
      if (CountryCode.Length != 0) hash ^= CountryCode.GetHashCode();
      if (LanIpv4.Length != 0) hash ^= LanIpv4.GetHashCode();
      if (LanIpv4SubnetMask.Length != 0) hash ^= LanIpv4SubnetMask.GetHashCode();
      if (SetupComplete != false) hash ^= SetupComplete.GetHashCode();
      if (ApplySetupComplete != false) hash ^= ApplySetupComplete.GetHashCode();
      if (FactoryResetTicker != 0) hash ^= FactoryResetTicker.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (WifiSecurity != global::SpaceX.API.Device.WifiConfig.Types.Security.Unknown) hash ^= WifiSecurity.GetHashCode();
      if (ApplyWifiSecurity != false) hash ^= ApplyWifiSecurity.GetHashCode();
      if (NetworkName5Ghz.Length != 0) hash ^= NetworkName5Ghz.GetHashCode();
      if (ApplyNetworkName5Ghz != false) hash ^= ApplyNetworkName5Ghz.GetHashCode();
      if (MacWan.Length != 0) hash ^= MacWan.GetHashCode();
      if (ApplyMacWan != false) hash ^= ApplyMacWan.GetHashCode();
      if (MacLan.Length != 0) hash ^= MacLan.GetHashCode();
      if (ApplyMacLan != false) hash ^= ApplyMacLan.GetHashCode();
      if (MacLan2Ghz.Length != 0) hash ^= MacLan2Ghz.GetHashCode();
      if (ApplyMacLan2Ghz != false) hash ^= ApplyMacLan2Ghz.GetHashCode();
      if (MacLan5Ghz.Length != 0) hash ^= MacLan5Ghz.GetHashCode();
      if (ApplyMacLan5Ghz != false) hash ^= ApplyMacLan5Ghz.GetHashCode();
      if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
      if (Disable2Ghz != false) hash ^= Disable2Ghz.GetHashCode();
      if (ApplyDisable2Ghz != false) hash ^= ApplyDisable2Ghz.GetHashCode();
      if (Disable5Ghz != false) hash ^= Disable5Ghz.GetHashCode();
      if (ApplyDisable5Ghz != false) hash ^= ApplyDisable5Ghz.GetHashCode();
      if (DisableHidden != false) hash ^= DisableHidden.GetHashCode();
      if (ApplyDisableHidden != false) hash ^= ApplyDisableHidden.GetHashCode();
      if (Channel2Ghz != 0) hash ^= Channel2Ghz.GetHashCode();
      if (ApplyChannel2Ghz != false) hash ^= ApplyChannel2Ghz.GetHashCode();
      if (Channel5Ghz != 0) hash ^= Channel5Ghz.GetHashCode();
      if (ApplyChannel5Ghz != false) hash ^= ApplyChannel5Ghz.GetHashCode();
      hash ^= MeshAuths.GetHashCode();
      if (ApplyMeshAuths != false) hash ^= ApplyMeshAuths.GetHashCode();
      hash ^= meshUpstreams_.GetHashCode();
      if (ApplyMeshUpstreams != false) hash ^= ApplyMeshUpstreams.GetHashCode();
      hash ^= trustedPeers_.GetHashCode();
      if (ApplyTrustedPeers != false) hash ^= ApplyTrustedPeers.GetHashCode();
      hash ^= distrustedPeers_.GetHashCode();
      if (ApplyDistrustedPeers != false) hash ^= ApplyDistrustedPeers.GetHashCode();
      hash ^= dynamicKeys_.GetHashCode();
      if (IsRepeater != false) hash ^= IsRepeater.GetHashCode();
      if (ApplyIsRepeater != false) hash ^= ApplyIsRepeater.GetHashCode();
      if (ExperimentsEnableMesh != false) hash ^= ExperimentsEnableMesh.GetHashCode();
      if (ApplyExperimentsEnableMesh != false) hash ^= ApplyExperimentsEnableMesh.GetHashCode();
      if (BootCount != 0) hash ^= BootCount.GetHashCode();
      if (HtBandwidth.Length != 0) hash ^= HtBandwidth.GetHashCode();
      if (VhtBandwidth.Length != 0) hash ^= VhtBandwidth.GetHashCode();
      if (WirelessMode2Ghz.Length != 0) hash ^= WirelessMode2Ghz.GetHashCode();
      if (WirelessMode5Ghz.Length != 0) hash ^= WirelessMode5Ghz.GetHashCode();
      hash ^= nameservers_.GetHashCode();
      if (ApplyNameservers != false) hash ^= ApplyNameservers.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (NetworkName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NetworkName);
      }
      if (NetworkPassword.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NetworkPassword);
      }
      if (CountryCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CountryCode);
      }
      if (LanIpv4.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(LanIpv4);
      }
      if (LanIpv4SubnetMask.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(LanIpv4SubnetMask);
      }
      if (SetupComplete != false) {
        output.WriteRawTag(56);
        output.WriteBool(SetupComplete);
      }
      if (FactoryResetTicker != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(FactoryResetTicker);
      }
      if (Version != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Version);
      }
      if (WifiSecurity != global::SpaceX.API.Device.WifiConfig.Types.Security.Unknown) {
        output.WriteRawTag(80);
        output.WriteEnum((int) WifiSecurity);
      }
      if (NetworkName5Ghz.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(NetworkName5Ghz);
      }
      if (MacWan.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(MacWan);
      }
      if (MacLan.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(MacLan);
      }
      if (MacLan2Ghz.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(MacLan2Ghz);
      }
      if (MacLan5Ghz.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(MacLan5Ghz);
      }
      if (DeviceId.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(DeviceId);
      }
      if (Disable2Ghz != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(Disable2Ghz);
      }
      if (Disable5Ghz != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(Disable5Ghz);
      }
      if (Channel2Ghz != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(Channel2Ghz);
      }
      if (Channel5Ghz != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(Channel5Ghz);
      }
      meshAuths_.WriteTo(output, _map_meshAuths_codec);
      dynamicKeys_.WriteTo(output, _repeated_dynamicKeys_codec);
      if (IsRepeater != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(IsRepeater);
      }
      if (ExperimentsEnableMesh != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(ExperimentsEnableMesh);
      }
      meshUpstreams_.WriteTo(output, _repeated_meshUpstreams_codec);
      if (BootCount != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(BootCount);
      }
      trustedPeers_.WriteTo(output, _repeated_trustedPeers_codec);
      distrustedPeers_.WriteTo(output, _repeated_distrustedPeers_codec);
      if (DisableHidden != false) {
        output.WriteRawTag(232, 1);
        output.WriteBool(DisableHidden);
      }
      nameservers_.WriteTo(output, _repeated_nameservers_codec);
      if (ApplyNetworkName != false) {
        output.WriteRawTag(200, 62);
        output.WriteBool(ApplyNetworkName);
      }
      if (ApplyNetworkPassword != false) {
        output.WriteRawTag(208, 62);
        output.WriteBool(ApplyNetworkPassword);
      }
      if (ApplyWifiSecurity != false) {
        output.WriteRawTag(224, 62);
        output.WriteBool(ApplyWifiSecurity);
      }
      if (ApplyNetworkName5Ghz != false) {
        output.WriteRawTag(232, 62);
        output.WriteBool(ApplyNetworkName5Ghz);
      }
      if (ApplyMacWan != false) {
        output.WriteRawTag(240, 62);
        output.WriteBool(ApplyMacWan);
      }
      if (ApplyMacLan != false) {
        output.WriteRawTag(248, 62);
        output.WriteBool(ApplyMacLan);
      }
      if (ApplyMacLan2Ghz != false) {
        output.WriteRawTag(128, 63);
        output.WriteBool(ApplyMacLan2Ghz);
      }
      if (ApplyMacLan5Ghz != false) {
        output.WriteRawTag(136, 63);
        output.WriteBool(ApplyMacLan5Ghz);
      }
      if (ApplySetupComplete != false) {
        output.WriteRawTag(144, 63);
        output.WriteBool(ApplySetupComplete);
      }
      if (ApplyDisable2Ghz != false) {
        output.WriteRawTag(152, 63);
        output.WriteBool(ApplyDisable2Ghz);
      }
      if (ApplyDisable5Ghz != false) {
        output.WriteRawTag(160, 63);
        output.WriteBool(ApplyDisable5Ghz);
      }
      if (ApplyChannel2Ghz != false) {
        output.WriteRawTag(168, 63);
        output.WriteBool(ApplyChannel2Ghz);
      }
      if (ApplyChannel5Ghz != false) {
        output.WriteRawTag(176, 63);
        output.WriteBool(ApplyChannel5Ghz);
      }
      if (ApplyDisableHidden != false) {
        output.WriteRawTag(184, 63);
        output.WriteBool(ApplyDisableHidden);
      }
      if (ApplyMeshAuths != false) {
        output.WriteRawTag(232, 63);
        output.WriteBool(ApplyMeshAuths);
      }
      if (ApplyIsRepeater != false) {
        output.WriteRawTag(184, 64);
        output.WriteBool(ApplyIsRepeater);
      }
      if (ApplyExperimentsEnableMesh != false) {
        output.WriteRawTag(136, 65);
        output.WriteBool(ApplyExperimentsEnableMesh);
      }
      if (ApplyMeshUpstreams != false) {
        output.WriteRawTag(216, 65);
        output.WriteBool(ApplyMeshUpstreams);
      }
      if (ApplyTrustedPeers != false) {
        output.WriteRawTag(224, 65);
        output.WriteBool(ApplyTrustedPeers);
      }
      if (ApplyDistrustedPeers != false) {
        output.WriteRawTag(232, 65);
        output.WriteBool(ApplyDistrustedPeers);
      }
      if (ApplyNameservers != false) {
        output.WriteRawTag(240, 65);
        output.WriteBool(ApplyNameservers);
      }
      if (HtBandwidth.Length != 0) {
        output.WriteRawTag(138, 125);
        output.WriteString(HtBandwidth);
      }
      if (VhtBandwidth.Length != 0) {
        output.WriteRawTag(146, 125);
        output.WriteString(VhtBandwidth);
      }
      if (WirelessMode2Ghz.Length != 0) {
        output.WriteRawTag(154, 125);
        output.WriteString(WirelessMode2Ghz);
      }
      if (WirelessMode5Ghz.Length != 0) {
        output.WriteRawTag(162, 125);
        output.WriteString(WirelessMode5Ghz);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (NetworkName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NetworkName);
      }
      if (NetworkPassword.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NetworkPassword);
      }
      if (CountryCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CountryCode);
      }
      if (LanIpv4.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(LanIpv4);
      }
      if (LanIpv4SubnetMask.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(LanIpv4SubnetMask);
      }
      if (SetupComplete != false) {
        output.WriteRawTag(56);
        output.WriteBool(SetupComplete);
      }
      if (FactoryResetTicker != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(FactoryResetTicker);
      }
      if (Version != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Version);
      }
      if (WifiSecurity != global::SpaceX.API.Device.WifiConfig.Types.Security.Unknown) {
        output.WriteRawTag(80);
        output.WriteEnum((int) WifiSecurity);
      }
      if (NetworkName5Ghz.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(NetworkName5Ghz);
      }
      if (MacWan.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(MacWan);
      }
      if (MacLan.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(MacLan);
      }
      if (MacLan2Ghz.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(MacLan2Ghz);
      }
      if (MacLan5Ghz.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(MacLan5Ghz);
      }
      if (DeviceId.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(DeviceId);
      }
      if (Disable2Ghz != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(Disable2Ghz);
      }
      if (Disable5Ghz != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(Disable5Ghz);
      }
      if (Channel2Ghz != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(Channel2Ghz);
      }
      if (Channel5Ghz != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(Channel5Ghz);
      }
      meshAuths_.WriteTo(ref output, _map_meshAuths_codec);
      dynamicKeys_.WriteTo(ref output, _repeated_dynamicKeys_codec);
      if (IsRepeater != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(IsRepeater);
      }
      if (ExperimentsEnableMesh != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(ExperimentsEnableMesh);
      }
      meshUpstreams_.WriteTo(ref output, _repeated_meshUpstreams_codec);
      if (BootCount != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(BootCount);
      }
      trustedPeers_.WriteTo(ref output, _repeated_trustedPeers_codec);
      distrustedPeers_.WriteTo(ref output, _repeated_distrustedPeers_codec);
      if (DisableHidden != false) {
        output.WriteRawTag(232, 1);
        output.WriteBool(DisableHidden);
      }
      nameservers_.WriteTo(ref output, _repeated_nameservers_codec);
      if (ApplyNetworkName != false) {
        output.WriteRawTag(200, 62);
        output.WriteBool(ApplyNetworkName);
      }
      if (ApplyNetworkPassword != false) {
        output.WriteRawTag(208, 62);
        output.WriteBool(ApplyNetworkPassword);
      }
      if (ApplyWifiSecurity != false) {
        output.WriteRawTag(224, 62);
        output.WriteBool(ApplyWifiSecurity);
      }
      if (ApplyNetworkName5Ghz != false) {
        output.WriteRawTag(232, 62);
        output.WriteBool(ApplyNetworkName5Ghz);
      }
      if (ApplyMacWan != false) {
        output.WriteRawTag(240, 62);
        output.WriteBool(ApplyMacWan);
      }
      if (ApplyMacLan != false) {
        output.WriteRawTag(248, 62);
        output.WriteBool(ApplyMacLan);
      }
      if (ApplyMacLan2Ghz != false) {
        output.WriteRawTag(128, 63);
        output.WriteBool(ApplyMacLan2Ghz);
      }
      if (ApplyMacLan5Ghz != false) {
        output.WriteRawTag(136, 63);
        output.WriteBool(ApplyMacLan5Ghz);
      }
      if (ApplySetupComplete != false) {
        output.WriteRawTag(144, 63);
        output.WriteBool(ApplySetupComplete);
      }
      if (ApplyDisable2Ghz != false) {
        output.WriteRawTag(152, 63);
        output.WriteBool(ApplyDisable2Ghz);
      }
      if (ApplyDisable5Ghz != false) {
        output.WriteRawTag(160, 63);
        output.WriteBool(ApplyDisable5Ghz);
      }
      if (ApplyChannel2Ghz != false) {
        output.WriteRawTag(168, 63);
        output.WriteBool(ApplyChannel2Ghz);
      }
      if (ApplyChannel5Ghz != false) {
        output.WriteRawTag(176, 63);
        output.WriteBool(ApplyChannel5Ghz);
      }
      if (ApplyDisableHidden != false) {
        output.WriteRawTag(184, 63);
        output.WriteBool(ApplyDisableHidden);
      }
      if (ApplyMeshAuths != false) {
        output.WriteRawTag(232, 63);
        output.WriteBool(ApplyMeshAuths);
      }
      if (ApplyIsRepeater != false) {
        output.WriteRawTag(184, 64);
        output.WriteBool(ApplyIsRepeater);
      }
      if (ApplyExperimentsEnableMesh != false) {
        output.WriteRawTag(136, 65);
        output.WriteBool(ApplyExperimentsEnableMesh);
      }
      if (ApplyMeshUpstreams != false) {
        output.WriteRawTag(216, 65);
        output.WriteBool(ApplyMeshUpstreams);
      }
      if (ApplyTrustedPeers != false) {
        output.WriteRawTag(224, 65);
        output.WriteBool(ApplyTrustedPeers);
      }
      if (ApplyDistrustedPeers != false) {
        output.WriteRawTag(232, 65);
        output.WriteBool(ApplyDistrustedPeers);
      }
      if (ApplyNameservers != false) {
        output.WriteRawTag(240, 65);
        output.WriteBool(ApplyNameservers);
      }
      if (HtBandwidth.Length != 0) {
        output.WriteRawTag(138, 125);
        output.WriteString(HtBandwidth);
      }
      if (VhtBandwidth.Length != 0) {
        output.WriteRawTag(146, 125);
        output.WriteString(VhtBandwidth);
      }
      if (WirelessMode2Ghz.Length != 0) {
        output.WriteRawTag(154, 125);
        output.WriteString(WirelessMode2Ghz);
      }
      if (WirelessMode5Ghz.Length != 0) {
        output.WriteRawTag(162, 125);
        output.WriteString(WirelessMode5Ghz);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (NetworkName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NetworkName);
      }
      if (ApplyNetworkName != false) {
        size += 2 + 1;
      }
      if (NetworkPassword.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NetworkPassword);
      }
      if (ApplyNetworkPassword != false) {
        size += 2 + 1;
      }
      if (CountryCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CountryCode);
      }
      if (LanIpv4.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LanIpv4);
      }
      if (LanIpv4SubnetMask.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LanIpv4SubnetMask);
      }
      if (SetupComplete != false) {
        size += 1 + 1;
      }
      if (ApplySetupComplete != false) {
        size += 2 + 1;
      }
      if (FactoryResetTicker != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FactoryResetTicker);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      if (WifiSecurity != global::SpaceX.API.Device.WifiConfig.Types.Security.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WifiSecurity);
      }
      if (ApplyWifiSecurity != false) {
        size += 2 + 1;
      }
      if (NetworkName5Ghz.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NetworkName5Ghz);
      }
      if (ApplyNetworkName5Ghz != false) {
        size += 2 + 1;
      }
      if (MacWan.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MacWan);
      }
      if (ApplyMacWan != false) {
        size += 2 + 1;
      }
      if (MacLan.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MacLan);
      }
      if (ApplyMacLan != false) {
        size += 2 + 1;
      }
      if (MacLan2Ghz.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MacLan2Ghz);
      }
      if (ApplyMacLan2Ghz != false) {
        size += 2 + 1;
      }
      if (MacLan5Ghz.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MacLan5Ghz);
      }
      if (ApplyMacLan5Ghz != false) {
        size += 2 + 1;
      }
      if (DeviceId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
      }
      if (Disable2Ghz != false) {
        size += 2 + 1;
      }
      if (ApplyDisable2Ghz != false) {
        size += 2 + 1;
      }
      if (Disable5Ghz != false) {
        size += 2 + 1;
      }
      if (ApplyDisable5Ghz != false) {
        size += 2 + 1;
      }
      if (DisableHidden != false) {
        size += 2 + 1;
      }
      if (ApplyDisableHidden != false) {
        size += 2 + 1;
      }
      if (Channel2Ghz != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Channel2Ghz);
      }
      if (ApplyChannel2Ghz != false) {
        size += 2 + 1;
      }
      if (Channel5Ghz != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Channel5Ghz);
      }
      if (ApplyChannel5Ghz != false) {
        size += 2 + 1;
      }
      size += meshAuths_.CalculateSize(_map_meshAuths_codec);
      if (ApplyMeshAuths != false) {
        size += 2 + 1;
      }
      size += meshUpstreams_.CalculateSize(_repeated_meshUpstreams_codec);
      if (ApplyMeshUpstreams != false) {
        size += 2 + 1;
      }
      size += trustedPeers_.CalculateSize(_repeated_trustedPeers_codec);
      if (ApplyTrustedPeers != false) {
        size += 2 + 1;
      }
      size += distrustedPeers_.CalculateSize(_repeated_distrustedPeers_codec);
      if (ApplyDistrustedPeers != false) {
        size += 2 + 1;
      }
      size += dynamicKeys_.CalculateSize(_repeated_dynamicKeys_codec);
      if (IsRepeater != false) {
        size += 2 + 1;
      }
      if (ApplyIsRepeater != false) {
        size += 2 + 1;
      }
      if (ExperimentsEnableMesh != false) {
        size += 2 + 1;
      }
      if (ApplyExperimentsEnableMesh != false) {
        size += 2 + 1;
      }
      if (BootCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BootCount);
      }
      if (HtBandwidth.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HtBandwidth);
      }
      if (VhtBandwidth.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(VhtBandwidth);
      }
      if (WirelessMode2Ghz.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WirelessMode2Ghz);
      }
      if (WirelessMode5Ghz.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WirelessMode5Ghz);
      }
      size += nameservers_.CalculateSize(_repeated_nameservers_codec);
      if (ApplyNameservers != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(WifiConfig other) {
      if (other == null) {
        return;
      }
      if (other.NetworkName.Length != 0) {
        NetworkName = other.NetworkName;
      }
      if (other.ApplyNetworkName != false) {
        ApplyNetworkName = other.ApplyNetworkName;
      }
      if (other.NetworkPassword.Length != 0) {
        NetworkPassword = other.NetworkPassword;
      }
      if (other.ApplyNetworkPassword != false) {
        ApplyNetworkPassword = other.ApplyNetworkPassword;
      }
      if (other.CountryCode.Length != 0) {
        CountryCode = other.CountryCode;
      }
      if (other.LanIpv4.Length != 0) {
        LanIpv4 = other.LanIpv4;
      }
      if (other.LanIpv4SubnetMask.Length != 0) {
        LanIpv4SubnetMask = other.LanIpv4SubnetMask;
      }
      if (other.SetupComplete != false) {
        SetupComplete = other.SetupComplete;
      }
      if (other.ApplySetupComplete != false) {
        ApplySetupComplete = other.ApplySetupComplete;
      }
      if (other.FactoryResetTicker != 0) {
        FactoryResetTicker = other.FactoryResetTicker;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.WifiSecurity != global::SpaceX.API.Device.WifiConfig.Types.Security.Unknown) {
        WifiSecurity = other.WifiSecurity;
      }
      if (other.ApplyWifiSecurity != false) {
        ApplyWifiSecurity = other.ApplyWifiSecurity;
      }
      if (other.NetworkName5Ghz.Length != 0) {
        NetworkName5Ghz = other.NetworkName5Ghz;
      }
      if (other.ApplyNetworkName5Ghz != false) {
        ApplyNetworkName5Ghz = other.ApplyNetworkName5Ghz;
      }
      if (other.MacWan.Length != 0) {
        MacWan = other.MacWan;
      }
      if (other.ApplyMacWan != false) {
        ApplyMacWan = other.ApplyMacWan;
      }
      if (other.MacLan.Length != 0) {
        MacLan = other.MacLan;
      }
      if (other.ApplyMacLan != false) {
        ApplyMacLan = other.ApplyMacLan;
      }
      if (other.MacLan2Ghz.Length != 0) {
        MacLan2Ghz = other.MacLan2Ghz;
      }
      if (other.ApplyMacLan2Ghz != false) {
        ApplyMacLan2Ghz = other.ApplyMacLan2Ghz;
      }
      if (other.MacLan5Ghz.Length != 0) {
        MacLan5Ghz = other.MacLan5Ghz;
      }
      if (other.ApplyMacLan5Ghz != false) {
        ApplyMacLan5Ghz = other.ApplyMacLan5Ghz;
      }
      if (other.DeviceId.Length != 0) {
        DeviceId = other.DeviceId;
      }
      if (other.Disable2Ghz != false) {
        Disable2Ghz = other.Disable2Ghz;
      }
      if (other.ApplyDisable2Ghz != false) {
        ApplyDisable2Ghz = other.ApplyDisable2Ghz;
      }
      if (other.Disable5Ghz != false) {
        Disable5Ghz = other.Disable5Ghz;
      }
      if (other.ApplyDisable5Ghz != false) {
        ApplyDisable5Ghz = other.ApplyDisable5Ghz;
      }
      if (other.DisableHidden != false) {
        DisableHidden = other.DisableHidden;
      }
      if (other.ApplyDisableHidden != false) {
        ApplyDisableHidden = other.ApplyDisableHidden;
      }
      if (other.Channel2Ghz != 0) {
        Channel2Ghz = other.Channel2Ghz;
      }
      if (other.ApplyChannel2Ghz != false) {
        ApplyChannel2Ghz = other.ApplyChannel2Ghz;
      }
      if (other.Channel5Ghz != 0) {
        Channel5Ghz = other.Channel5Ghz;
      }
      if (other.ApplyChannel5Ghz != false) {
        ApplyChannel5Ghz = other.ApplyChannel5Ghz;
      }
      meshAuths_.Add(other.meshAuths_);
      if (other.ApplyMeshAuths != false) {
        ApplyMeshAuths = other.ApplyMeshAuths;
      }
      meshUpstreams_.Add(other.meshUpstreams_);
      if (other.ApplyMeshUpstreams != false) {
        ApplyMeshUpstreams = other.ApplyMeshUpstreams;
      }
      trustedPeers_.Add(other.trustedPeers_);
      if (other.ApplyTrustedPeers != false) {
        ApplyTrustedPeers = other.ApplyTrustedPeers;
      }
      distrustedPeers_.Add(other.distrustedPeers_);
      if (other.ApplyDistrustedPeers != false) {
        ApplyDistrustedPeers = other.ApplyDistrustedPeers;
      }
      dynamicKeys_.Add(other.dynamicKeys_);
      if (other.IsRepeater != false) {
        IsRepeater = other.IsRepeater;
      }
      if (other.ApplyIsRepeater != false) {
        ApplyIsRepeater = other.ApplyIsRepeater;
      }
      if (other.ExperimentsEnableMesh != false) {
        ExperimentsEnableMesh = other.ExperimentsEnableMesh;
      }
      if (other.ApplyExperimentsEnableMesh != false) {
        ApplyExperimentsEnableMesh = other.ApplyExperimentsEnableMesh;
      }
      if (other.BootCount != 0) {
        BootCount = other.BootCount;
      }
      if (other.HtBandwidth.Length != 0) {
        HtBandwidth = other.HtBandwidth;
      }
      if (other.VhtBandwidth.Length != 0) {
        VhtBandwidth = other.VhtBandwidth;
      }
      if (other.WirelessMode2Ghz.Length != 0) {
        WirelessMode2Ghz = other.WirelessMode2Ghz;
      }
      if (other.WirelessMode5Ghz.Length != 0) {
        WirelessMode5Ghz = other.WirelessMode5Ghz;
      }
      nameservers_.Add(other.nameservers_);
      if (other.ApplyNameservers != false) {
        ApplyNameservers = other.ApplyNameservers;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NetworkName = input.ReadString();
            break;
          }
          case 18: {
            NetworkPassword = input.ReadString();
            break;
          }
          case 26: {
            CountryCode = input.ReadString();
            break;
          }
          case 42: {
            LanIpv4 = input.ReadString();
            break;
          }
          case 50: {
            LanIpv4SubnetMask = input.ReadString();
            break;
          }
          case 56: {
            SetupComplete = input.ReadBool();
            break;
          }
          case 64: {
            FactoryResetTicker = input.ReadUInt32();
            break;
          }
          case 72: {
            Version = input.ReadUInt32();
            break;
          }
          case 80: {
            WifiSecurity = (global::SpaceX.API.Device.WifiConfig.Types.Security) input.ReadEnum();
            break;
          }
          case 90: {
            NetworkName5Ghz = input.ReadString();
            break;
          }
          case 98: {
            MacWan = input.ReadString();
            break;
          }
          case 106: {
            MacLan = input.ReadString();
            break;
          }
          case 114: {
            MacLan2Ghz = input.ReadString();
            break;
          }
          case 122: {
            MacLan5Ghz = input.ReadString();
            break;
          }
          case 130: {
            DeviceId = input.ReadString();
            break;
          }
          case 136: {
            Disable2Ghz = input.ReadBool();
            break;
          }
          case 144: {
            Disable5Ghz = input.ReadBool();
            break;
          }
          case 152: {
            Channel2Ghz = input.ReadUInt32();
            break;
          }
          case 160: {
            Channel5Ghz = input.ReadUInt32();
            break;
          }
          case 170: {
            meshAuths_.AddEntriesFrom(input, _map_meshAuths_codec);
            break;
          }
          case 178: {
            dynamicKeys_.AddEntriesFrom(input, _repeated_dynamicKeys_codec);
            break;
          }
          case 184: {
            IsRepeater = input.ReadBool();
            break;
          }
          case 192: {
            ExperimentsEnableMesh = input.ReadBool();
            break;
          }
          case 202: {
            meshUpstreams_.AddEntriesFrom(input, _repeated_meshUpstreams_codec);
            break;
          }
          case 208: {
            BootCount = input.ReadInt32();
            break;
          }
          case 218: {
            trustedPeers_.AddEntriesFrom(input, _repeated_trustedPeers_codec);
            break;
          }
          case 226: {
            distrustedPeers_.AddEntriesFrom(input, _repeated_distrustedPeers_codec);
            break;
          }
          case 232: {
            DisableHidden = input.ReadBool();
            break;
          }
          case 242: {
            nameservers_.AddEntriesFrom(input, _repeated_nameservers_codec);
            break;
          }
          case 8008: {
            ApplyNetworkName = input.ReadBool();
            break;
          }
          case 8016: {
            ApplyNetworkPassword = input.ReadBool();
            break;
          }
          case 8032: {
            ApplyWifiSecurity = input.ReadBool();
            break;
          }
          case 8040: {
            ApplyNetworkName5Ghz = input.ReadBool();
            break;
          }
          case 8048: {
            ApplyMacWan = input.ReadBool();
            break;
          }
          case 8056: {
            ApplyMacLan = input.ReadBool();
            break;
          }
          case 8064: {
            ApplyMacLan2Ghz = input.ReadBool();
            break;
          }
          case 8072: {
            ApplyMacLan5Ghz = input.ReadBool();
            break;
          }
          case 8080: {
            ApplySetupComplete = input.ReadBool();
            break;
          }
          case 8088: {
            ApplyDisable2Ghz = input.ReadBool();
            break;
          }
          case 8096: {
            ApplyDisable5Ghz = input.ReadBool();
            break;
          }
          case 8104: {
            ApplyChannel2Ghz = input.ReadBool();
            break;
          }
          case 8112: {
            ApplyChannel5Ghz = input.ReadBool();
            break;
          }
          case 8120: {
            ApplyDisableHidden = input.ReadBool();
            break;
          }
          case 8168: {
            ApplyMeshAuths = input.ReadBool();
            break;
          }
          case 8248: {
            ApplyIsRepeater = input.ReadBool();
            break;
          }
          case 8328: {
            ApplyExperimentsEnableMesh = input.ReadBool();
            break;
          }
          case 8408: {
            ApplyMeshUpstreams = input.ReadBool();
            break;
          }
          case 8416: {
            ApplyTrustedPeers = input.ReadBool();
            break;
          }
          case 8424: {
            ApplyDistrustedPeers = input.ReadBool();
            break;
          }
          case 8432: {
            ApplyNameservers = input.ReadBool();
            break;
          }
          case 16010: {
            HtBandwidth = input.ReadString();
            break;
          }
          case 16018: {
            VhtBandwidth = input.ReadString();
            break;
          }
          case 16026: {
            WirelessMode2Ghz = input.ReadString();
            break;
          }
          case 16034: {
            WirelessMode5Ghz = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            NetworkName = input.ReadString();
            break;
          }
          case 18: {
            NetworkPassword = input.ReadString();
            break;
          }
          case 26: {
            CountryCode = input.ReadString();
            break;
          }
          case 42: {
            LanIpv4 = input.ReadString();
            break;
          }
          case 50: {
            LanIpv4SubnetMask = input.ReadString();
            break;
          }
          case 56: {
            SetupComplete = input.ReadBool();
            break;
          }
          case 64: {
            FactoryResetTicker = input.ReadUInt32();
            break;
          }
          case 72: {
            Version = input.ReadUInt32();
            break;
          }
          case 80: {
            WifiSecurity = (global::SpaceX.API.Device.WifiConfig.Types.Security) input.ReadEnum();
            break;
          }
          case 90: {
            NetworkName5Ghz = input.ReadString();
            break;
          }
          case 98: {
            MacWan = input.ReadString();
            break;
          }
          case 106: {
            MacLan = input.ReadString();
            break;
          }
          case 114: {
            MacLan2Ghz = input.ReadString();
            break;
          }
          case 122: {
            MacLan5Ghz = input.ReadString();
            break;
          }
          case 130: {
            DeviceId = input.ReadString();
            break;
          }
          case 136: {
            Disable2Ghz = input.ReadBool();
            break;
          }
          case 144: {
            Disable5Ghz = input.ReadBool();
            break;
          }
          case 152: {
            Channel2Ghz = input.ReadUInt32();
            break;
          }
          case 160: {
            Channel5Ghz = input.ReadUInt32();
            break;
          }
          case 170: {
            meshAuths_.AddEntriesFrom(ref input, _map_meshAuths_codec);
            break;
          }
          case 178: {
            dynamicKeys_.AddEntriesFrom(ref input, _repeated_dynamicKeys_codec);
            break;
          }
          case 184: {
            IsRepeater = input.ReadBool();
            break;
          }
          case 192: {
            ExperimentsEnableMesh = input.ReadBool();
            break;
          }
          case 202: {
            meshUpstreams_.AddEntriesFrom(ref input, _repeated_meshUpstreams_codec);
            break;
          }
          case 208: {
            BootCount = input.ReadInt32();
            break;
          }
          case 218: {
            trustedPeers_.AddEntriesFrom(ref input, _repeated_trustedPeers_codec);
            break;
          }
          case 226: {
            distrustedPeers_.AddEntriesFrom(ref input, _repeated_distrustedPeers_codec);
            break;
          }
          case 232: {
            DisableHidden = input.ReadBool();
            break;
          }
          case 242: {
            nameservers_.AddEntriesFrom(ref input, _repeated_nameservers_codec);
            break;
          }
          case 8008: {
            ApplyNetworkName = input.ReadBool();
            break;
          }
          case 8016: {
            ApplyNetworkPassword = input.ReadBool();
            break;
          }
          case 8032: {
            ApplyWifiSecurity = input.ReadBool();
            break;
          }
          case 8040: {
            ApplyNetworkName5Ghz = input.ReadBool();
            break;
          }
          case 8048: {
            ApplyMacWan = input.ReadBool();
            break;
          }
          case 8056: {
            ApplyMacLan = input.ReadBool();
            break;
          }
          case 8064: {
            ApplyMacLan2Ghz = input.ReadBool();
            break;
          }
          case 8072: {
            ApplyMacLan5Ghz = input.ReadBool();
            break;
          }
          case 8080: {
            ApplySetupComplete = input.ReadBool();
            break;
          }
          case 8088: {
            ApplyDisable2Ghz = input.ReadBool();
            break;
          }
          case 8096: {
            ApplyDisable5Ghz = input.ReadBool();
            break;
          }
          case 8104: {
            ApplyChannel2Ghz = input.ReadBool();
            break;
          }
          case 8112: {
            ApplyChannel5Ghz = input.ReadBool();
            break;
          }
          case 8120: {
            ApplyDisableHidden = input.ReadBool();
            break;
          }
          case 8168: {
            ApplyMeshAuths = input.ReadBool();
            break;
          }
          case 8248: {
            ApplyIsRepeater = input.ReadBool();
            break;
          }
          case 8328: {
            ApplyExperimentsEnableMesh = input.ReadBool();
            break;
          }
          case 8408: {
            ApplyMeshUpstreams = input.ReadBool();
            break;
          }
          case 8416: {
            ApplyTrustedPeers = input.ReadBool();
            break;
          }
          case 8424: {
            ApplyDistrustedPeers = input.ReadBool();
            break;
          }
          case 8432: {
            ApplyNameservers = input.ReadBool();
            break;
          }
          case 16010: {
            HtBandwidth = input.ReadString();
            break;
          }
          case 16018: {
            VhtBandwidth = input.ReadString();
            break;
          }
          case 16026: {
            WirelessMode2Ghz = input.ReadString();
            break;
          }
          case 16034: {
            WirelessMode5Ghz = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the WifiConfig message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum Security {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("WPA2")] Wpa2 = 1,
        [pbr::OriginalName("WPA3")] Wpa3 = 2,
        [pbr::OriginalName("WPA2WPA3")] Wpa2Wpa3 = 3,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
